{"ast":null,"code":"var _jsxFileName = \"/home/raju/Documents/Channakya/customer/client/src/components/Content/Contract/ReactForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormHelperText, MenuItem, TextField } from \"@material-ui/core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport moment from \"moment\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReactForm = ({\n  openDialog,\n  setOpenDialog,\n  isEditMode,\n  setIsEditMode,\n  clients\n}) => {\n  _s();\n\n  // local state\n  const [selectPaymentValue, setSelectPaymentValue] = useState(undefined);\n  const [selectClientValue, setSelectClientValue] = useState(undefined); // date today and one year after\n\n  const signDate = moment().format(\"yyyy-MM-DD\").toString();\n  const endDate = moment().add(1, \"y\").format(\"yyyy-MM-DD\").toString(); // hook form default date values\n\n  const defaultValues = {\n    contract_sign_date: signDate,\n    contract_end_date: endDate,\n    client_id: selectClientValue ? selectClientValue : undefined,\n    payment_status: selectPaymentValue ? selectPaymentValue : undefined\n  }; // hook form\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    control,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: defaultValues\n  });\n\n  const handleClose = () => {\n    setIsEditMode(false);\n    setOpenDialog(false);\n    setSelectPaymentValue(undefined);\n    reset({});\n  };\n\n  const onSubmit = data => {\n    console.log(\"ob submit\");\n    console.log(data);\n    if (!isEditMode) axios.post(CONTRACT_API, data).then(({\n      data\n    }) => {\n      mutate(CONTRACT_API);\n      setOpenDialog(false);\n      enqueueSnackbar(data.success_msg, {\n        variant: \"success\"\n      });\n    }).catch(err => {\n      console.log(err);\n    });else {\n      console.log(data);\n      axios.patch(CONTRACT_API + updateId, data).then(({\n        data\n      }) => {\n        mutate(CONTRACT_API);\n        setOpenDialog(false);\n        setIsEditMode(false);\n        enqueueSnackbar(data.success_msg, {\n          variant: \"success\"\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: openDialog,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      children: isEditMode ? \"Update Contract\" : \"Add Contract\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"client_id\",\n          control: control,\n          rules: {\n            required: \"Client is required!\"\n          },\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(TextField, {\n            select: true,\n            ...field,\n            style: {\n              marginBottom: \"10px\"\n            },\n            label: \"Client\",\n            fullWidth: true,\n            variant: \"outlined\",\n            error: !!errors.client_id,\n            children: clients && clients.map(client => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: client._id,\n              children: client.company_name\n            }, client._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          className: \"MuiFormHelperText-root MuiFormHelperText-contained Mui-error\",\n          children: errors && errors.client_id && errors.client_id.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"payment_status\",\n          rules: {\n            required: \"Payment Status is required!\"\n          },\n          control: control,\n          render: ({\n            field\n          }) => /*#__PURE__*/_jsxDEV(TextField, { ...field,\n            select: true,\n            label: \"Payment Status\",\n            fullWidth: true,\n            variant: \"outlined\",\n            error: !!errors.payment_status,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"paid\",\n              children: \"Paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"notpaid\",\n              children: \"Not Paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          className: \"MuiFormHelperText-root MuiFormHelperText-contained Mui-error\",\n          children: errors && errors.payment_status && errors.payment_status.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, { ...register(\"contract_sign_date\", {\n            required: \"Contract Sign Date is required!\"\n          }),\n          fullWidth: true,\n          margin: \"normal\",\n          variant: \"outlined\",\n          label: \"Contract Sign Date\",\n          type: \"date\",\n          error: !!errors.contract_sign_date,\n          helperText: errors && errors.contract_sign_date && errors.contract_sign_date.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, { ...register(\"contract_end_date\", {\n            required: \"Contract End Date is required!\"\n          }),\n          fullWidth: true,\n          margin: \"normal\",\n          variant: \"outlined\",\n          label: \"Contract End Date\",\n          type: \"date\",\n          error: !!errors.contract_end_date,\n          helperText: errors && errors.contract_end_date && errors.contract_end_date.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {},\n          color: \"primary\",\n          variant: \"contained\",\n          type: \"submit\",\n          children: isEditMode ? \"Update\" : \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose // onClick={() => {\n          //   setOpenDialog(false);\n          //   reset({});\n          // }}\n          ,\n          color: \"secondary\",\n          variant: \"contained\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReactForm, \"K1PjWPHLP1o6k1G8ju2jFytmmHU=\", false, function () {\n  return [useForm];\n});\n\n_c = ReactForm;\nexport default ReactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactForm\");","map":{"version":3,"sources":["/home/raju/Documents/Channakya/customer/client/src/components/Content/Contract/ReactForm.tsx"],"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","FormHelperText","MenuItem","TextField","Controller","useForm","moment","useState","ReactForm","openDialog","setOpenDialog","isEditMode","setIsEditMode","clients","selectPaymentValue","setSelectPaymentValue","undefined","selectClientValue","setSelectClientValue","signDate","format","toString","endDate","add","defaultValues","contract_sign_date","contract_end_date","client_id","payment_status","register","handleSubmit","reset","control","formState","errors","handleClose","onSubmit","data","console","log","axios","post","CONTRACT_API","then","mutate","enqueueSnackbar","success_msg","variant","catch","err","patch","updateId","required","field","marginBottom","map","client","_id","company_name","message"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormHelperText,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport Moment from \"react-moment\";\nimport moment from \"moment\";\nimport { ClientType, ContractType } from \"./types\";\nimport { useState } from \"react\";\n\nconst ReactForm: React.FC = ({\n  openDialog,\n  setOpenDialog,\n  isEditMode,\n  setIsEditMode,\n  clients,\n}) => {\n  // local state\n  const [selectPaymentValue, setSelectPaymentValue] =\n    useState<string>(undefined);\n  const [selectClientValue, setSelectClientValue] = useState<string>(undefined);\n\n  // date today and one year after\n  const signDate: string = moment().format(\"yyyy-MM-DD\").toString();\n  const endDate: string = moment().add(1, \"y\").format(\"yyyy-MM-DD\").toString();\n\n  // hook form default date values\n  const defaultValues = {\n    contract_sign_date: signDate,\n    contract_end_date: endDate,\n    client_id: selectClientValue ? selectClientValue : undefined,\n    payment_status: selectPaymentValue ? selectPaymentValue : undefined,\n  };\n\n  // hook form\n  const {\n    register,\n    handleSubmit,\n    reset,\n    control,\n    formState: { errors },\n  } = useForm<ContractType>({\n    defaultValues: defaultValues,\n  });\n\n  const handleClose = () => {\n    setIsEditMode(false);\n    setOpenDialog(false);\n    setSelectPaymentValue(undefined);\n    reset({});\n  };\n  const onSubmit = (data: ContractType) => {\n    console.log(\"ob submit\");\n    console.log(data);\n    if (!isEditMode)\n      axios\n        .post(CONTRACT_API, data)\n        .then(({ data }) => {\n          mutate(CONTRACT_API);\n          setOpenDialog(false);\n          enqueueSnackbar(data.success_msg, { variant: \"success\" });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    else {\n      console.log(data);\n      axios\n        .patch(CONTRACT_API + updateId, data)\n        .then(({ data }) => {\n          mutate(CONTRACT_API);\n          setOpenDialog(false);\n          setIsEditMode(false);\n          enqueueSnackbar(data.success_msg, { variant: \"success\" });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  return (\n    <Dialog\n      open={openDialog}\n      onClose={handleClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">\n        {isEditMode ? \"Update Contract\" : \"Add Contract\"}\n      </DialogTitle>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Controller\n            name=\"client_id\"\n            control={control}\n            rules={{ required: \"Client is required!\" }}\n            render={({ field }) => (\n              <TextField\n                select\n                {...field}\n                style={{ marginBottom: \"10px\" }}\n                label=\"Client\"\n                fullWidth\n                variant=\"outlined\"\n                error={!!errors.client_id}\n              >\n                {clients &&\n                  clients.map((client) => (\n                    <MenuItem key={client._id} value={client._id}>\n                      {client.company_name}\n                    </MenuItem>\n                  ))}\n              </TextField>\n            )}\n          />\n          <FormHelperText className=\"MuiFormHelperText-root MuiFormHelperText-contained Mui-error\">\n            {errors && errors.client_id && errors.client_id.message}\n          </FormHelperText>\n\n          <Controller\n            name=\"payment_status\"\n            rules={{ required: \"Payment Status is required!\" }}\n            control={control}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                select\n                label=\"Payment Status\"\n                fullWidth\n                variant=\"outlined\"\n                error={!!errors.payment_status}\n              >\n                <MenuItem value=\"paid\">Paid</MenuItem>\n                <MenuItem value=\"notpaid\">Not Paid</MenuItem>\n              </TextField>\n            )}\n          />\n          <FormHelperText className=\"MuiFormHelperText-root MuiFormHelperText-contained Mui-error\">\n            {errors && errors.payment_status && errors.payment_status.message}\n          </FormHelperText>\n\n          <TextField\n            {...register(\"contract_sign_date\", {\n              required: \"Contract Sign Date is required!\",\n            })}\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Contract Sign Date\"\n            type=\"date\"\n            error={!!errors.contract_sign_date}\n            helperText={\n              errors &&\n              errors.contract_sign_date &&\n              errors.contract_sign_date.message\n            }\n          />\n          <TextField\n            {...register(\"contract_end_date\", {\n              required: \"Contract End Date is required!\",\n            })}\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Contract End Date\"\n            type=\"date\"\n            error={!!errors.contract_end_date}\n            helperText={\n              errors &&\n              errors.contract_end_date &&\n              errors.contract_end_date.message\n            }\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {}}\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"submit\"\n          >\n            {isEditMode ? \"Update\" : \"Save\"}\n          </Button>\n          <Button\n            onClick={handleClose}\n            // onClick={() => {\n            //   setOpenDialog(false);\n            //   reset({});\n            // }}\n            color=\"secondary\"\n            variant=\"contained\"\n          >\n            Close\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default ReactForm;\n"]},"metadata":{},"sourceType":"module"}